/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var helpers_pb = require('./helpers_pb.js');
var blockchain_pb = require('./blockchain_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.BlockRequest', null, global);
goog.exportSymbol('proto.BlockResponse', null, global);
goog.exportSymbol('proto.Connect', null, global);
goog.exportSymbol('proto.PeersRequest', null, global);
goog.exportSymbol('proto.Precommit', null, global);
goog.exportSymbol('proto.Prevote', null, global);
goog.exportSymbol('proto.PrevotesRequest', null, global);
goog.exportSymbol('proto.Propose', null, global);
goog.exportSymbol('proto.ProposeRequest', null, global);
goog.exportSymbol('proto.Status', null, global);
goog.exportSymbol('proto.TransactionsRequest', null, global);
goog.exportSymbol('proto.TransactionsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Connect.displayName = 'proto.Connect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connect.prototype.toObject = function(opt_includeInstance) {
  return proto.Connect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Connect.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    userAgent: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connect}
 */
proto.Connect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connect;
  return proto.Connect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connect}
 */
proto.Connect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubAddr(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Connect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Connect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Connect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string pub_addr = 1;
 * @return {string}
 */
proto.Connect.prototype.getPubAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Connect.prototype.setPubAddr = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Connect.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Connect.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Connect.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Connect.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string user_agent = 3;
 * @return {string}
 */
proto.Connect.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Connect.prototype.setUserAgent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Status.displayName = 'proto.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lastHash: (f = msg.getLastHash()) && helpers_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Status}
 */
proto.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Status;
  return proto.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Status}
 */
proto.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setLastHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLastHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.Status.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Status.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Hash last_hash = 2;
 * @return {?proto.Hash}
 */
proto.Status.prototype.getLastHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 2));
};


/** @param {?proto.Hash|undefined} value */
proto.Status.prototype.setLastHash = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Status.prototype.clearLastHash = function() {
  this.setLastHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Status.prototype.hasLastHash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Propose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Propose.repeatedFields_, null);
};
goog.inherits(proto.Propose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Propose.displayName = 'proto.Propose';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Propose.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Propose.prototype.toObject = function(opt_includeInstance) {
  return proto.Propose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Propose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Propose.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prevHash: (f = msg.getPrevHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    helpers_pb.Hash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Propose}
 */
proto.Propose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Propose;
  return proto.Propose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Propose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Propose}
 */
proto.Propose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setPrevHash(value);
      break;
    case 5:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Propose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Propose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Propose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Propose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPrevHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 validator = 1;
 * @return {number}
 */
proto.Propose.prototype.getValidator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Propose.prototype.setValidator = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.Propose.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Propose.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 round = 3;
 * @return {number}
 */
proto.Propose.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Propose.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Hash prev_hash = 4;
 * @return {?proto.Hash}
 */
proto.Propose.prototype.getPrevHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 4));
};


/** @param {?proto.Hash|undefined} value */
proto.Propose.prototype.setPrevHash = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Propose.prototype.clearPrevHash = function() {
  this.setPrevHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Propose.prototype.hasPrevHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Hash transactions = 5;
 * @return {!Array<!proto.Hash>}
 */
proto.Propose.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.Hash>} */ (
    jspb.Message.getRepeatedWrapperField(this, helpers_pb.Hash, 5));
};


/** @param {!Array<!proto.Hash>} value */
proto.Propose.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Hash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Hash}
 */
proto.Propose.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Hash, opt_index);
};


proto.Propose.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Prevote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Prevote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Prevote.displayName = 'proto.Prevote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Prevote.prototype.toObject = function(opt_includeInstance) {
  return proto.Prevote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Prevote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Prevote.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    proposeHash: (f = msg.getProposeHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    lockedRound: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Prevote}
 */
proto.Prevote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Prevote;
  return proto.Prevote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Prevote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Prevote}
 */
proto.Prevote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setProposeHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockedRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Prevote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Prevote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Prevote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Prevote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getProposeHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getLockedRound();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 validator = 1;
 * @return {number}
 */
proto.Prevote.prototype.getValidator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Prevote.prototype.setValidator = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.Prevote.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Prevote.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 round = 3;
 * @return {number}
 */
proto.Prevote.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Prevote.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Hash propose_hash = 4;
 * @return {?proto.Hash}
 */
proto.Prevote.prototype.getProposeHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 4));
};


/** @param {?proto.Hash|undefined} value */
proto.Prevote.prototype.setProposeHash = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Prevote.prototype.clearProposeHash = function() {
  this.setProposeHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Prevote.prototype.hasProposeHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 locked_round = 5;
 * @return {number}
 */
proto.Prevote.prototype.getLockedRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Prevote.prototype.setLockedRound = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Precommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Precommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Precommit.displayName = 'proto.Precommit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Precommit.prototype.toObject = function(opt_includeInstance) {
  return proto.Precommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Precommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Precommit.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    proposeHash: (f = msg.getProposeHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    blockHash: (f = msg.getBlockHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Precommit}
 */
proto.Precommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Precommit;
  return proto.Precommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Precommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Precommit}
 */
proto.Precommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setProposeHash(value);
      break;
    case 5:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setBlockHash(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Precommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Precommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Precommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Precommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getProposeHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getBlockHash();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 validator = 1;
 * @return {number}
 */
proto.Precommit.prototype.getValidator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Precommit.prototype.setValidator = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.Precommit.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Precommit.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 round = 3;
 * @return {number}
 */
proto.Precommit.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Precommit.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Hash propose_hash = 4;
 * @return {?proto.Hash}
 */
proto.Precommit.prototype.getProposeHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 4));
};


/** @param {?proto.Hash|undefined} value */
proto.Precommit.prototype.setProposeHash = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Precommit.prototype.clearProposeHash = function() {
  this.setProposeHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Precommit.prototype.hasProposeHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Hash block_hash = 5;
 * @return {?proto.Hash}
 */
proto.Precommit.prototype.getBlockHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 5));
};


/** @param {?proto.Hash|undefined} value */
proto.Precommit.prototype.setBlockHash = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Precommit.prototype.clearBlockHash = function() {
  this.setBlockHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Precommit.prototype.hasBlockHash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp time = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Precommit.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Precommit.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Precommit.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Precommit.prototype.hasTime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlockResponse.repeatedFields_, null);
};
goog.inherits(proto.BlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockResponse.displayName = 'proto.BlockResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlockResponse.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f),
    block: (f = msg.getBlock()) && blockchain_pb.Block.toObject(includeInstance, f),
    precommitsList: msg.getPrecommitsList_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    helpers_pb.Hash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockResponse}
 */
proto.BlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockResponse;
  return proto.BlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockResponse}
 */
proto.BlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = new blockchain_pb.Block;
      reader.readMessage(value,blockchain_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPrecommits(value);
      break;
    case 4:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      blockchain_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getPrecommitsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.BlockResponse.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.BlockResponse.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BlockResponse.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockResponse.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Block block = 2;
 * @return {?proto.Block}
 */
proto.BlockResponse.prototype.getBlock = function() {
  return /** @type{?proto.Block} */ (
    jspb.Message.getWrapperField(this, blockchain_pb.Block, 2));
};


/** @param {?proto.Block|undefined} value */
proto.BlockResponse.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.BlockResponse.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes precommits = 3;
 * @return {!Array<string>}
 */
proto.BlockResponse.prototype.getPrecommitsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes precommits = 3;
 * This is a type-conversion wrapper around `getPrecommitsList()`
 * @return {!Array<string>}
 */
proto.BlockResponse.prototype.getPrecommitsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPrecommitsList()));
};


/**
 * repeated bytes precommits = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrecommitsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.BlockResponse.prototype.getPrecommitsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPrecommitsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.BlockResponse.prototype.setPrecommitsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.BlockResponse.prototype.addPrecommits = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.BlockResponse.prototype.clearPrecommitsList = function() {
  this.setPrecommitsList([]);
};


/**
 * repeated Hash transactions = 4;
 * @return {!Array<!proto.Hash>}
 */
proto.BlockResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.Hash>} */ (
    jspb.Message.getRepeatedWrapperField(this, helpers_pb.Hash, 4));
};


/** @param {!Array<!proto.Hash>} value */
proto.BlockResponse.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Hash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Hash}
 */
proto.BlockResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Hash, opt_index);
};


proto.BlockResponse.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.TransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransactionsResponse.displayName = 'proto.TransactionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransactionsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f),
    transactionsList: msg.getTransactionsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionsResponse}
 */
proto.TransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionsResponse;
  return proto.TransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionsResponse}
 */
proto.TransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.TransactionsResponse.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.TransactionsResponse.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransactionsResponse.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionsResponse.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes transactions = 2;
 * @return {!Array<string>}
 */
proto.TransactionsResponse.prototype.getTransactionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes transactions = 2;
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array<string>}
 */
proto.TransactionsResponse.prototype.getTransactionsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionsList()));
};


/**
 * repeated bytes transactions = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.TransactionsResponse.prototype.getTransactionsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.TransactionsResponse.prototype.setTransactionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.TransactionsResponse.prototype.addTransactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.TransactionsResponse.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProposeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProposeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProposeRequest.displayName = 'proto.ProposeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProposeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ProposeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProposeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProposeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposeHash: (f = msg.getProposeHash()) && helpers_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProposeRequest}
 */
proto.ProposeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProposeRequest;
  return proto.ProposeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProposeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProposeRequest}
 */
proto.ProposeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setProposeHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProposeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProposeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProposeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProposeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getProposeHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.ProposeRequest.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.ProposeRequest.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ProposeRequest.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProposeRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.ProposeRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ProposeRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Hash propose_hash = 3;
 * @return {?proto.Hash}
 */
proto.ProposeRequest.prototype.getProposeHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 3));
};


/** @param {?proto.Hash|undefined} value */
proto.ProposeRequest.prototype.setProposeHash = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ProposeRequest.prototype.clearProposeHash = function() {
  this.setProposeHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProposeRequest.prototype.hasProposeHash = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TransactionsRequest.repeatedFields_, null);
};
goog.inherits(proto.TransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransactionsRequest.displayName = 'proto.TransactionsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransactionsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    helpers_pb.Hash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionsRequest}
 */
proto.TransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionsRequest;
  return proto.TransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionsRequest}
 */
proto.TransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.TransactionsRequest.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.TransactionsRequest.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TransactionsRequest.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionsRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Hash txs = 2;
 * @return {!Array<!proto.Hash>}
 */
proto.TransactionsRequest.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.Hash>} */ (
    jspb.Message.getRepeatedWrapperField(this, helpers_pb.Hash, 2));
};


/** @param {!Array<!proto.Hash>} value */
proto.TransactionsRequest.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Hash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Hash}
 */
proto.TransactionsRequest.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Hash, opt_index);
};


proto.TransactionsRequest.prototype.clearTxsList = function() {
  this.setTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PrevotesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PrevotesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PrevotesRequest.displayName = 'proto.PrevotesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PrevotesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PrevotesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PrevotesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrevotesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    proposeHash: (f = msg.getProposeHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    validators: (f = msg.getValidators()) && helpers_pb.BitVec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PrevotesRequest}
 */
proto.PrevotesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PrevotesRequest;
  return proto.PrevotesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PrevotesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PrevotesRequest}
 */
proto.PrevotesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRound(value);
      break;
    case 4:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setProposeHash(value);
      break;
    case 5:
      var value = new helpers_pb.BitVec;
      reader.readMessage(value,helpers_pb.BitVec.deserializeBinaryFromReader);
      msg.setValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PrevotesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PrevotesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PrevotesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PrevotesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getProposeHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getValidators();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      helpers_pb.BitVec.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.PrevotesRequest.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.PrevotesRequest.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PrevotesRequest.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PrevotesRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.PrevotesRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PrevotesRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 round = 3;
 * @return {number}
 */
proto.PrevotesRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PrevotesRequest.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Hash propose_hash = 4;
 * @return {?proto.Hash}
 */
proto.PrevotesRequest.prototype.getProposeHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 4));
};


/** @param {?proto.Hash|undefined} value */
proto.PrevotesRequest.prototype.setProposeHash = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.PrevotesRequest.prototype.clearProposeHash = function() {
  this.setProposeHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PrevotesRequest.prototype.hasProposeHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BitVec validators = 5;
 * @return {?proto.BitVec}
 */
proto.PrevotesRequest.prototype.getValidators = function() {
  return /** @type{?proto.BitVec} */ (
    jspb.Message.getWrapperField(this, helpers_pb.BitVec, 5));
};


/** @param {?proto.BitVec|undefined} value */
proto.PrevotesRequest.prototype.setValidators = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.PrevotesRequest.prototype.clearValidators = function() {
  this.setValidators(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PrevotesRequest.prototype.hasValidators = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PeersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PeersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PeersRequest.displayName = 'proto.PeersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PeersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PeersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PeersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PeersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PeersRequest}
 */
proto.PeersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PeersRequest;
  return proto.PeersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PeersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PeersRequest}
 */
proto.PeersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PeersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PeersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PeersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PeersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.PeersRequest.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.PeersRequest.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PeersRequest.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PeersRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BlockRequest.displayName = 'proto.BlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: (f = msg.getTo()) && helpers_pb.PublicKey.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockRequest}
 */
proto.BlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockRequest;
  return proto.BlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockRequest}
 */
proto.BlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new helpers_pb.PublicKey;
      reader.readMessage(value,helpers_pb.PublicKey.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      helpers_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional PublicKey to = 1;
 * @return {?proto.PublicKey}
 */
proto.BlockRequest.prototype.getTo = function() {
  return /** @type{?proto.PublicKey} */ (
    jspb.Message.getWrapperField(this, helpers_pb.PublicKey, 1));
};


/** @param {?proto.PublicKey|undefined} value */
proto.BlockRequest.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BlockRequest.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BlockRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.BlockRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BlockRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
