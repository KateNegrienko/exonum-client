/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var helpers_pb = require('./helpers_pb.js');
goog.exportSymbol('proto.Block', null, global);
goog.exportSymbol('proto.ConfigReference', null, global);
goog.exportSymbol('proto.TxLocation', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block.displayName = 'proto.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prevHash: (f = msg.getPrevHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    txHash: (f = msg.getTxHash()) && helpers_pb.Hash.toObject(includeInstance, f),
    stateHash: (f = msg.getStateHash()) && helpers_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProposerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxCount(value);
      break;
    case 4:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setPrevHash(value);
      break;
    case 5:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setTxHash(value);
      break;
    case 6:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setStateHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPrevHash();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getTxHash();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
  f = message.getStateHash();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 proposer_id = 1;
 * @return {number}
 */
proto.Block.prototype.getProposerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Block.prototype.setProposerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Block.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 tx_count = 3;
 * @return {number}
 */
proto.Block.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Block.prototype.setTxCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Hash prev_hash = 4;
 * @return {?proto.Hash}
 */
proto.Block.prototype.getPrevHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 4));
};


/** @param {?proto.Hash|undefined} value */
proto.Block.prototype.setPrevHash = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Block.prototype.clearPrevHash = function() {
  this.setPrevHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Block.prototype.hasPrevHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Hash tx_hash = 5;
 * @return {?proto.Hash}
 */
proto.Block.prototype.getTxHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 5));
};


/** @param {?proto.Hash|undefined} value */
proto.Block.prototype.setTxHash = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Block.prototype.clearTxHash = function() {
  this.setTxHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Block.prototype.hasTxHash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Hash state_hash = 6;
 * @return {?proto.Hash}
 */
proto.Block.prototype.getStateHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 6));
};


/** @param {?proto.Hash|undefined} value */
proto.Block.prototype.setStateHash = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Block.prototype.clearStateHash = function() {
  this.setStateHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Block.prototype.hasStateHash = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ConfigReference.displayName = 'proto.ConfigReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigReference.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    actualFrom: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cfgHash: (f = msg.getCfgHash()) && helpers_pb.Hash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigReference}
 */
proto.ConfigReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigReference;
  return proto.ConfigReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigReference}
 */
proto.ConfigReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActualFrom(value);
      break;
    case 2:
      var value = new helpers_pb.Hash;
      reader.readMessage(value,helpers_pb.Hash.deserializeBinaryFromReader);
      msg.setCfgHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActualFrom();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCfgHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      helpers_pb.Hash.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 actual_from = 1;
 * @return {number}
 */
proto.ConfigReference.prototype.getActualFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ConfigReference.prototype.setActualFrom = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Hash cfg_hash = 2;
 * @return {?proto.Hash}
 */
proto.ConfigReference.prototype.getCfgHash = function() {
  return /** @type{?proto.Hash} */ (
    jspb.Message.getWrapperField(this, helpers_pb.Hash, 2));
};


/** @param {?proto.Hash|undefined} value */
proto.ConfigReference.prototype.setCfgHash = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ConfigReference.prototype.clearCfgHash = function() {
  this.setCfgHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConfigReference.prototype.hasCfgHash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TxLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TxLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TxLocation.displayName = 'proto.TxLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TxLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.TxLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TxLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TxLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    positionInBlock: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TxLocation}
 */
proto.TxLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TxLocation;
  return proto.TxLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TxLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TxLocation}
 */
proto.TxLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPositionInBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TxLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TxLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TxLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TxLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPositionInBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.TxLocation.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TxLocation.prototype.setBlockHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 position_in_block = 2;
 * @return {number}
 */
proto.TxLocation.prototype.getPositionInBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TxLocation.prototype.setPositionInBlock = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
